/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace DonationJar {
  export type DonationStruct = {
    donator: AddressLike;
    recipient: AddressLike;
    amount: BigNumberish;
    message: string;
    timestamp: BigNumberish;
  };

  export type DonationStructOutput = [
    donator: string,
    recipient: string,
    amount: bigint,
    message: string,
    timestamp: bigint
  ] & {
    donator: string;
    recipient: string;
    amount: bigint;
    message: string;
    timestamp: bigint;
  };
}

export interface DonationJarInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addDonate"
      | "donations"
      | "getMyDonates"
      | "getRank"
      | "getReceivedDonations"
      | "totalDonated"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Donated"): EventFragment;

  encodeFunctionData(
    functionFragment: "addDonate",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "donations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyDonates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRank",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceivedDonations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonated",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addDonate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donations", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMyDonates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReceivedDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDonated",
    data: BytesLike
  ): Result;
}

export namespace DonatedEvent {
  export type InputTuple = [
    donator: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish,
    message: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    donator: string,
    recipient: string,
    amount: bigint,
    message: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    donator: string;
    recipient: string;
    amount: bigint;
    message: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DonationJar extends BaseContract {
  connect(runner?: ContractRunner | null): DonationJar;
  waitForDeployment(): Promise<this>;

  interface: DonationJarInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addDonate: TypedContractMethod<
    [recipient: AddressLike, message: string],
    [void],
    "payable"
  >;

  donations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, bigint] & {
        donator: string;
        recipient: string;
        amount: bigint;
        message: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getMyDonates: TypedContractMethod<
    [],
    [DonationJar.DonationStructOutput[]],
    "view"
  >;

  getRank: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getReceivedDonations: TypedContractMethod<
    [],
    [DonationJar.DonationStructOutput[]],
    "view"
  >;

  totalDonated: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addDonate"
  ): TypedContractMethod<
    [recipient: AddressLike, message: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "donations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, bigint] & {
        donator: string;
        recipient: string;
        amount: bigint;
        message: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyDonates"
  ): TypedContractMethod<[], [DonationJar.DonationStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getRank"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReceivedDonations"
  ): TypedContractMethod<[], [DonationJar.DonationStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "totalDonated"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "Donated"
  ): TypedContractEvent<
    DonatedEvent.InputTuple,
    DonatedEvent.OutputTuple,
    DonatedEvent.OutputObject
  >;

  filters: {
    "Donated(address,address,uint256,string,uint256)": TypedContractEvent<
      DonatedEvent.InputTuple,
      DonatedEvent.OutputTuple,
      DonatedEvent.OutputObject
    >;
    Donated: TypedContractEvent<
      DonatedEvent.InputTuple,
      DonatedEvent.OutputTuple,
      DonatedEvent.OutputObject
    >;
  };
}
